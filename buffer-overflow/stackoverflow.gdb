gdb -q --args stackoverflow AAAAAAAAAAAA
Reading symbols from stackoverflow...(no debugging symbols found)...done.
(gdb) set disassembly-flavor intel
(gdb) break main
Breakpoint 1 at 0x80484d8
(gdb) run
Starting program: stackoverflow AAAAAAAAAAAA
warning: no loadable sections found in added symbol-file system-supplied DSO at 0xb7fe0000

Breakpoint 1, 0x080484d8 in main ()
(gdb) disassemble main
Dump of assembler code for function main:
   0x080484d5 <+0>:	push   ebp
   0x080484d6 <+1>:	mov    ebp,esp
=> 0x080484d8 <+3>:	and    esp,0xfffffff0
   0x080484db <+6>:	sub    esp,0x10
   0x080484de <+9>:	mov    DWORD PTR [esp+0x4],0x804847c
   0x080484e6 <+17>:	mov    DWORD PTR [esp],0x80486d4
   0x080484ed <+24>:	call   0x8048340 <printf@plt>
   0x080484f2 <+29>:	mov    DWORD PTR [esp+0x4],0x80484c1
   0x080484fa <+37>:	mov    DWORD PTR [esp],0x80486f8
   0x08048501 <+44>:	call   0x8048340 <printf@plt>
   0x08048506 <+49>:	mov    DWORD PTR [esp+0x4],0x80484d5
   0x0804850e <+57>:	mov    DWORD PTR [esp],0x804871c
   0x08048515 <+64>:	call   0x8048340 <printf@plt>
   0x0804851a <+69>:	cmp    DWORD PTR [ebp+0x8],0x2
   0x0804851e <+73>:	je     0x804853c <main+103>
   0x08048520 <+75>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048523 <+78>:	mov    eax,DWORD PTR [eax]
   0x08048525 <+80>:	mov    DWORD PTR [esp+0x4],eax
   0x08048529 <+84>:	mov    DWORD PTR [esp],0x804873c
   0x08048530 <+91>:	call   0x8048340 <printf@plt>
   0x08048535 <+96>:	mov    eax,0xffffffff
   0x0804853a <+101>:	jmp    0x8048551 <main+124>
   0x0804853c <+103>:	mov    eax,DWORD PTR [ebp+0xc]
   0x0804853f <+106>:	add    eax,0x4
   0x08048542 <+109>:	mov    eax,DWORD PTR [eax]
   0x08048544 <+111>:	mov    DWORD PTR [esp],eax
   0x08048547 <+114>:	call   0x804847c <vuln>
   0x0804854c <+119>:	mov    eax,0x0
   0x08048551 <+124>:	leave  
   0x08048552 <+125>:	ret    
End of assembler dump.
(gdb) break *0x08048547
Breakpoint 2 at 0x8048547
(gdb) define hook-stop
Type commands for definition of "hook-stop".
End with a line saying just "end".
>disassemble $eip,+10
>x/16xw $esp
>end
(gdb) c
Continuing.
Address of function "vuln"   : 0x804847c
Address of function "exploit": 0x80484c1
Address of function "main": 0x80484d5
Dump of assembler code from 0x8048547 to 0x8048551:
=> 0x08048547 <main+114>:	call   0x804847c <vuln>
   0x0804854c <main+119>:	mov    eax,0x0
End of assembler dump.
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0xbffff480:	0x08048570	0x00000000	0xbffff508	0xb7e72e46
0xbffff490:	0x00000002	0xbffff534	0xbffff540	0xb7fdd860
0xbffff4a0:	0xb7ff6821	0xffffffff	0xb7ffeff4	0x08048288

Breakpoint 2, 0x08048547 in main ()
(gdb) display /x $eax
1: /x $eax = 0xbffff6c1
(gdb) display /x $ebx
2: /x $ebx = 0xb7fbbff4
(gdb) display /x $ecx
3: /x $ecx = 0xbffff458
(gdb) display /x $esp
4: /x $esp = 0xbffff470
(gdb) stepi
Dump of assembler code from 0x804847c to 0x8048486:
=> 0x0804847c <vuln+0>:	push   ebp
   0x0804847d <vuln+1>:	mov    ebp,esp
   0x0804847f <vuln+3>:	sub    esp,0x28
   0x08048482 <vuln+6>:	mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbffff46c:	0x0804854c	0xbffff6c1	0x080484d5	0x0804857b
0xbffff47c:	0xb7fbbff4	0x08048570	0x00000000	0xbffff508
0xbffff48c:	0xb7e72e46	0x00000002	0xbffff534	0xbffff540
0xbffff49c:	0xb7fdd860	0xb7ff6821	0xffffffff	0xb7ffeff4
0x0804847c in vuln ()
4: /x $esp = 0xbffff46c
3: /x $ecx = 0xbffff458
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) stepi
Dump of assembler code from 0x804847d to 0x8048487:
=> 0x0804847d <vuln+1>:	mov    ebp,esp
   0x0804847f <vuln+3>:	sub    esp,0x28
   0x08048482 <vuln+6>:	mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbffff468:	0xbffff488	0x0804854c	0xbffff6c1	0x080484d5
0xbffff478:	0x0804857b	0xb7fbbff4	0x08048570	0x00000000
0xbffff488:	0xbffff508	0xb7e72e46	0x00000002	0xbffff534
0xbffff498:	0xbffff540	0xb7fdd860	0xb7ff6821	0xffffffff
0x0804847d in vuln ()
4: /x $esp = 0xbffff468
3: /x $ecx = 0xbffff458
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) stepi
Dump of assembler code from 0x804847f to 0x8048489:
=> 0x0804847f <vuln+3>:	sub    esp,0x28
   0x08048482 <vuln+6>:	mov    DWORD PTR [esp],0x80485f0
End of assembler dump.
0xbffff468:	0xbffff488	0x0804854c	0xbffff6c1	0x080484d5
0xbffff478:	0x0804857b	0xb7fbbff4	0x08048570	0x00000000
0xbffff488:	0xbffff508	0xb7e72e46	0x00000002	0xbffff534
0xbffff498:	0xbffff540	0xb7fdd860	0xb7ff6821	0xffffffff
0x0804847f in vuln ()
4: /x $esp = 0xbffff468
3: /x $ecx = 0xbffff458
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) stepi
Dump of assembler code from 0x8048482 to 0x804848c:
=> 0x08048482 <vuln+6>:	mov    DWORD PTR [esp],0x80485f0
   0x08048489 <vuln+13>:	call   0x8048340 <printf@plt>
End of assembler dump.
0xbffff440:	0x00000000	0x00000000	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x08048482 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff458
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) stepi
Dump of assembler code from 0x8048489 to 0x8048493:
=> 0x08048489 <vuln+13>:	call   0x8048340 <printf@plt>
   0x0804848e <vuln+18>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048491 <vuln+21>:	mov    DWORD PTR [esp+0x4],eax
End of assembler dump.
0xbffff440:	0x080485f0	0x00000000	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x08048489 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff458
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) nexti
Stack before exploit:
 (nil)
 0xbffff468
 0xb7ea5c50
 0xbffff488
 0xb7ea5c50
 0xb7fbc4e0
 0x804871c
 0xbffff474
 0xb7fbbff4
 0xbffff488
 0x804854c
 0xbffff6c1
 0x80484d5
 0x804857b
 0xb7fbbff4
 0x8048570

Dump of assembler code from 0x804848e to 0x8048498:
=> 0x0804848e <vuln+18>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048491 <vuln+21>:	mov    DWORD PTR [esp+0x4],eax
   0x08048495 <vuln+25>:	mov    DWORD PTR [esp],0x8048648
End of assembler dump.
0xbffff440:	0x080485f0	0x00000000	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x0804848e in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xcd
(gdb) stepi
Dump of assembler code from 0x8048491 to 0x804849b:
=> 0x08048491 <vuln+21>:	mov    DWORD PTR [esp+0x4],eax
   0x08048495 <vuln+25>:	mov    DWORD PTR [esp],0x8048648
End of assembler dump.
0xbffff440:	0x080485f0	0x00000000	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x08048491 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) 
Dump of assembler code from 0x8048495 to 0x804849f:
=> 0x08048495 <vuln+25>:	mov    DWORD PTR [esp],0x8048648
   0x0804849c <vuln+32>:	call   0x8048340 <printf@plt>
End of assembler dump.
0xbffff440:	0x080485f0	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x08048495 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) 
Dump of assembler code from 0x804849c to 0x80484a6:
=> 0x0804849c <vuln+32>:	call   0x8048340 <printf@plt>
   0x080484a1 <vuln+37>:	mov    eax,DWORD PTR [ebp+0x8]
   0x080484a4 <vuln+40>:	mov    DWORD PTR [esp+0x4],eax
End of assembler dump.
0xbffff440:	0x08048648	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x0804849c in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) nexti
Copying AAAAAAAAAAAA onto the stack

Dump of assembler code from 0x80484a1 to 0x80484ab:
=> 0x080484a1 <vuln+37>:	mov    eax,DWORD PTR [ebp+0x8]
   0x080484a4 <vuln+40>:	mov    DWORD PTR [esp+0x4],eax
   0x080484a8 <vuln+44>:	lea    eax,[ebp-0x12]
End of assembler dump.
0xbffff440:	0x08048648	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484a1 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0x25
(gdb) nexti
Dump of assembler code from 0x80484a4 to 0x80484ae:
=> 0x080484a4 <vuln+40>:	mov    DWORD PTR [esp+0x4],eax
   0x080484a8 <vuln+44>:	lea    eax,[ebp-0x12]
   0x080484ab <vuln+47>:	mov    DWORD PTR [esp],eax
End of assembler dump.
0xbffff440:	0x08048648	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484a4 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) 
Dump of assembler code from 0x80484a8 to 0x80484b2:
=> 0x080484a8 <vuln+44>:	lea    eax,[ebp-0x12]
   0x080484ab <vuln+47>:	mov    DWORD PTR [esp],eax
   0x080484ae <vuln+50>:	call   0x8048350 <strcpy@plt>
End of assembler dump.
0xbffff440:	0x08048648	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484a8 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff6c1
(gdb) 
Dump of assembler code from 0x80484ab to 0x80484b5:
=> 0x080484ab <vuln+47>:	mov    DWORD PTR [esp],eax
   0x080484ae <vuln+50>:	call   0x8048350 <strcpy@plt>
   0x080484b3 <vuln+55>:	mov    DWORD PTR [esp],0x8048664
End of assembler dump.
0xbffff440:	0x08048648	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484ab in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff456
(gdb) 
Dump of assembler code from 0x80484ae to 0x80484b8:
=> 0x080484ae <vuln+50>:	call   0x8048350 <strcpy@plt>
   0x080484b3 <vuln+55>:	mov    DWORD PTR [esp],0x8048664
End of assembler dump.
0xbffff440:	0xbffff456	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0xb7ea5c50	0xb7fbc4e0	0x0804871c
0xbffff460:	0xbffff474	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484ae in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff456
(gdb) 
Dump of assembler code from 0x80484b3 to 0x80484bd:
=> 0x080484b3 <vuln+55>:	mov    DWORD PTR [esp],0x8048664
   0x080484ba <vuln+62>:	call   0x8048340 <printf@plt>
End of assembler dump.
0xbffff440:	0xbffff456	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0x41415c50	0x41414141	0x41414141
0xbffff460:	0xbf004141	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484b3 in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0x0
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff456
(gdb) 
Dump of assembler code from 0x80484ba to 0x80484c4:
=> 0x080484ba <vuln+62>:	call   0x8048340 <printf@plt>
   0x080484bf <vuln+67>:	leave  
   0x080484c0 <vuln+68>:	ret    
   0x080484c1 <exploit+0>:	push   ebp
   0x080484c2 <exploit+1>:	mov    ebp,esp
End of assembler dump.
0xbffff440:	0x08048664	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0x41415c50	0x41414141	0x41414141
0xbffff460:	0xbf004141	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484ba in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0x0
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xbffff456
(gdb) 
Stack after exploit:
 0xbffff6c1
 0xbffff468
 0xb7ea5c50
 0xbffff488
 0x41415c50
 0x41414141
 0x41414141
 0xbf004141
 0xb7fbbff4
 0xbffff488
 0x804854c
 0xbffff6c1
 0x80484d5
 0x804857b
 0xb7fbbff4
 0x8048570

Dump of assembler code from 0x80484bf to 0x80484c9:
=> 0x080484bf <vuln+67>:	leave  
   0x080484c0 <vuln+68>:	ret    
   0x080484c1 <exploit+0>:	push   ebp
   0x080484c2 <exploit+1>:	mov    ebp,esp
   0x080484c4 <exploit+3>:	sub    esp,0x18
   0x080484c7 <exploit+6>:	mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbffff440:	0x08048664	0xbffff6c1	0xbffff468	0xb7ea5c50
0xbffff450:	0xbffff488	0x41415c50	0x41414141	0x41414141
0xbffff460:	0xbf004141	0xb7fbbff4	0xbffff488	0x0804854c
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0x080484bf in vuln ()
4: /x $esp = 0xbffff440
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xd2
(gdb) 
Dump of assembler code from 0x80484c0 to 0x80484ca:
=> 0x080484c0 <vuln+68>:	ret    
   0x080484c1 <exploit+0>:	push   ebp
   0x080484c2 <exploit+1>:	mov    ebp,esp
   0x080484c4 <exploit+3>:	sub    esp,0x18
   0x080484c7 <exploit+6>:	mov    DWORD PTR [esp],0x80486bb
End of assembler dump.
0xbffff46c:	0x0804854c	0xbffff6c1	0x080484d5	0x0804857b
0xbffff47c:	0xb7fbbff4	0x08048570	0x00000000	0xbffff508
0xbffff48c:	0xb7e72e46	0x00000002	0xbffff534	0xbffff540
0xbffff49c:	0xb7fdd860	0xb7ff6821	0xffffffff	0xb7ffeff4
0x080484c0 in vuln ()
4: /x $esp = 0xbffff46c
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xd2
(gdb) 
Dump of assembler code from 0x804854c to 0x8048556:
=> 0x0804854c <main+119>:	mov    eax,0x0
   0x08048551 <main+124>:	leave  
   0x08048552 <main+125>:	ret    
   0x08048553:	nop
   0x08048554:	nop
   0x08048555:	nop
End of assembler dump.
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0xbffff480:	0x08048570	0x00000000	0xbffff508	0xb7e72e46
0xbffff490:	0x00000002	0xbffff534	0xbffff540	0xb7fdd860
0xbffff4a0:	0xb7ff6821	0xffffffff	0xb7ffeff4	0x08048288
0x0804854c in main ()
4: /x $esp = 0xbffff470
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0xd2
(gdb) 
Dump of assembler code from 0x8048551 to 0x804855b:
=> 0x08048551 <main+124>:	leave  
   0x08048552 <main+125>:	ret    
   0x08048553:	nop
   0x08048554:	nop
   0x08048555:	nop
   0x08048556:	nop
   0x08048557:	nop
   0x08048558:	nop
   0x08048559:	nop
   0x0804855a:	nop
End of assembler dump.
0xbffff470:	0xbffff6c1	0x080484d5	0x0804857b	0xb7fbbff4
0xbffff480:	0x08048570	0x00000000	0xbffff508	0xb7e72e46
0xbffff490:	0x00000002	0xbffff534	0xbffff540	0xb7fdd860
0xbffff4a0:	0xb7ff6821	0xffffffff	0xb7ffeff4	0x08048288
0x08048551 in main ()
4: /x $esp = 0xbffff470
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0x0
(gdb) 
Dump of assembler code from 0x8048552 to 0x804855c:
=> 0x08048552 <main+125>:	ret    
   0x08048553:	nop
   0x08048554:	nop
   0x08048555:	nop
   0x08048556:	nop
   0x08048557:	nop
   0x08048558:	nop
   0x08048559:	nop
   0x0804855a:	nop
   0x0804855b:	nop
End of assembler dump.
0xbffff48c:	0xb7e72e46	0x00000002	0xbffff534	0xbffff540
0xbffff49c:	0xb7fdd860	0xb7ff6821	0xffffffff	0xb7ffeff4
0xbffff4ac:	0x08048288	0x00000001	0xbffff4f0	0xb7fefc16
0xbffff4bc:	0xb7fffac0	0xb7fddb58	0xb7fbbff4	0x00000000
0x08048552 in main ()
4: /x $esp = 0xbffff48c
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0x0
(gdb) 
Dump of assembler code from 0xb7e72e46 to 0xb7e72e50:
=> 0xb7e72e46 <__libc_start_main+230>:	mov    DWORD PTR [esp],eax
   0xb7e72e49 <__libc_start_main+233>:	call   0xb7e8b270 <exit>
   0xb7e72e4e <__libc_start_main+238>:	xor    ecx,ecx
End of assembler dump.
0xbffff490:	0x00000002	0xbffff534	0xbffff540	0xb7fdd860
0xbffff4a0:	0xb7ff6821	0xffffffff	0xb7ffeff4	0x08048288
0xbffff4b0:	0x00000001	0xbffff4f0	0xb7fefc16	0xb7fffac0
0xbffff4c0:	0xb7fddb58	0xb7fbbff4	0x00000000	0x00000000
0xb7e72e46 in __libc_start_main () from /lib/i386-linux-gnu/i686/cmov/libc.so.6
4: /x $esp = 0xbffff490
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0x0
(gdb) 
Dump of assembler code from 0xb7e72e49 to 0xb7e72e53:
=> 0xb7e72e49 <__libc_start_main+233>:	call   0xb7e8b270 <exit>
   0xb7e72e4e <__libc_start_main+238>:	xor    ecx,ecx
   0xb7e72e50 <__libc_start_main+240>:	jmp    0xb7e72d90 <__libc_start_main+48>
End of assembler dump.
0xbffff490:	0x00000000	0xbffff534	0xbffff540	0xb7fdd860
0xbffff4a0:	0xb7ff6821	0xffffffff	0xb7ffeff4	0x08048288
0xbffff4b0:	0x00000001	0xbffff4f0	0xb7fefc16	0xb7fffac0
0xbffff4c0:	0xb7fddb58	0xb7fbbff4	0x00000000	0x00000000
0xb7e72e49 in __libc_start_main () from /lib/i386-linux-gnu/i686/cmov/libc.so.6
4: /x $esp = 0xbffff490
3: /x $ecx = 0xbffff428
2: /x $ebx = 0xb7fbbff4
1: /x $eax = 0x0
(gdb)